#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/netfilter.h>
#include <linux/netfilter_ipv4.h>
#include <linux/skbuff.h>
#include <linux/tcp.h>
#include <linux/udp.h>
#include <linux/ip.h>
#include <linux/byteorder/generic.h>
#include <linux/in.h>
#include <linux/inet.h>

static struct nf_hook_ops ingress_hook; //netfilter hook for incoming packets
static struct nf_hook_ops egress_hook;	//netfilter hook for outgoing packets
struct sk_buff *sock_buff;		//bufer storing the packet
struct tcphdr *tcp_header;		//tcp header structure
struct iphdr *ip_header;		//ip header structure

unsigned int main_hook_funct(unsigned int hooknum,
 struct sk_buff **skb,
 const struct net_device *in,
 const struct net_device *out,
 int (*okfn)(struct sk_buff *)){
	sock_buff = skb;
	//grabing the ipheader
	ip_header = (struct iphdr *)skb_network_header(sock_buff);
	if(!sock_buff){
		return NF_ACCEPT;	
	}
	if(ip_header->protocol==6){
		tcp_header = (struct tcphdr *)skb_transport_header(sock_buff);
		unsigned int short matchport = 23;
		if(ntohs(tcp_header->dest)==matchport){
			printk(KERN_INFO "got a telnet packet going out and dropped it.\n");
			return NF_DROP;
		}
		if(ntohs(tcp_header->source)==matchport){
			printk(KERN_INFO "got a telnet packet coming in and dropped it.\n");
			return NF_DROP;
		}
	}
	return NF_ACCEPT;
}


int init_module(void){
ingress_hook.hook = main_hook_funct;
ingress_hook.hooknum = NF_INET_LOCAL_OUT;
ingress_hook.pf = PF_INET;
ingress_hook.priority = NF_IP_PRI_FIRST;
nf_register_hook(&ingress_hook);

printk(KERN_INFO "hook was created\n");
return 0;
}

void cleanup_module(void){
nf_unregister_hook(&ingress_hook);
printk(KERN_INFO "hook was removed\n");
}
